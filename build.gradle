buildscript {
    repositories {
		mavenCentral()
        jcenter()
        maven {
			url = "http://files.minecraftforge.net/maven"
		}
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "checkstyle"

version = "0.0.1"
group = "com.subatomicnetworks.subatomicscience" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "subatomicscience"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
		}
		resources {
			srcDir 'src/main/resources'
		}
	}
	api {
		java {
			srcDir 'src/api/java'
		}
	}
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
	
	// Put Access Transformer in the META-INF folder
	rename '(.+_at.cfg)', 'META-INF/$1'
}

// Access Transformer
jar {
	manifest {
	    attributes 'FMLAT': 'subatomicscience_at.cfg'
	}
}

// -----------
// extra jars (based on buildcraft 6.1.x's build.gradle)
// https://github.com/BuildCraft/BuildCraft/blob/6.1.x/build.gradle
// -----------

// source jar
sourceJar {
	from sourceSets.main.allSource
	from sourceSets.api.allSource
	classifier = 'sources'
}

// javadoc for api
javadoc {
	source += sourceSets.api.allSource
}

// javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

// api jar
task apiJar(type: Jar) {
	from sourceSets.api.output
	classifier = 'api'
}

jar {
	from sourceSets.api.output
}

checkstyle {
	configFile = file('guidelines/subatomicscience.checkstyle')
}

checkstyleApi.exclude 'cofh/**'

build.dependsOn sourceJar, javadocJar, apiJar